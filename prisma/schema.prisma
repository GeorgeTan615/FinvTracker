generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  transaction   Transaction[]
  investment    Investment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Transaction {
  id              String   @id @default(cuid())
  description     String?
  amount          Float
  image           String?
  createdAt       DateTime @default(now())
  category        String
  transactionType String
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Investment {
  id                String            @id @default(cuid())
  quantity          Float
  averagePrice      Float
  tickerSymbol      String
  investmentProduct InvestmentProduct @relation(fields: [tickerSymbol], references: [tickerSymbol], onDelete: Cascade)
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tickerSymbol])
}

// Easily extensible by adding other types, crypto, forex etc
enum InvestmentType {
  STOCK
}

model InvestmentProduct {
  tickerSymbol          String                  @id
  // name                  String
  type                  InvestmentType          @default(STOCK)
  // investmentProductData InvestmentProductData[]
  investment            Investment[]
  investmentProductData InvestmentProductData[]
}

model InvestmentProductData {
  id                String            @id @default(cuid())
  tickerSymbol      String
  date              DateTime
  price             Float
  change            Float
  changePercentage  String
  investmentProduct InvestmentProduct @relation(fields: [tickerSymbol], references: [tickerSymbol], onDelete: Cascade)
}
